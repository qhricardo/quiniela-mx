<form id="loginForm" class="needs-validation" novalidate>
  <div class="mb-3">
    <label for="email" class="form-label">Email</label>
    <input 
      type="email" 
      class="form-control" 
      id="email" 
      name="email"
      required
      pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$"
    >
    <div class="invalid-feedback">Por favor ingrese un email válido</div>
  </div>
  
  <div class="mb-3">
    <label for="password" class="form-label">Contraseña</label>
    <input 
      type="password" 
      class="form-control" 
      id="password" 
      name="password"
      required
      minlength="8"
    >
    <div class="invalid-feedback">Mínimo 8 caracteres</div>
  </div>

  <button type="submit" class="btn btn-primary w-100">
    <span id="spinner" class="spinner-border spinner-border-sm d-none"></span>
    Ingresar
  </button>
  
  <div id="errorAlert" class="alert alert-danger mt-3 d-none"></div>
</form>

<script>
(() => {
  const form = document.getElementById('loginForm');
  const spinner = document.getElementById('spinner');
  const errorAlert = document.getElementById('errorAlert');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!form.checkValidity()) {
      e.stopPropagation();
      form.classList.add('was-validated');
      return;
    }

    try {
      spinner.classList.remove('d-none');
      errorAlert.classList.add('d-none');

      const response = await fetch('/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: form.email.value,
          password: form.password.value
        }),
        credentials: 'include' // Para cookies HTTP-Only
      });

      if (!response.ok) {
        const { error } = await response.json();
        throw new Error(error || 'Error en la autenticación');
      }

      window.location.href = '/dashboard';
      
    } catch (error) {
      errorAlert.textContent = error.message;
      errorAlert.classList.remove('d-none');
    } finally {
      spinner.classList.add('d-none');
    }
  });
})();
</script>
